# ZAAI Connector Domain Benchmarks
#
# This file defines benchmarks for enterprise service integration, focusing on
# popular SaaS platforms and business productivity tools. These benchmarks test
# the AI's ability to integrate with external services, handle authentication,
# and perform CRUD operations through REST APIs.
#
# Service Categories:
# - Task Management: Jira, Asana, Trello for project and task tracking
# - Documentation: Confluence for knowledge management and documentation
# - Customer Support: Zendesk for ticket and customer interaction management  
# - Version Control: GitHub for code repository and issue management
# - CRM: Salesforce for customer relationship and sales management
# - ITSM: ServiceNow for IT service management and workflow automation
#
# Authentication Patterns:
# Most benchmarks use standard authentication methods:
# - API tokens and personal access tokens
# - OAuth2 client credentials (consumer key/secret)
# - Basic authentication (username/password)
# - Environment variable injection for secure credential handling
#
# Cross-file Dependencies:
# - Inherits common configurations from ../suite.yaml
# - Test functions import connector classes from connector.py module
# - All benchmarks expect zerg_state parameter with authentication credentials
#
# Testing Philosophy:
# Each benchmark tests full CRUD operations (Create, Read, Update, Delete)
# to validate comprehensive API integration capabilities rather than
# simple read-only access.

# Jira Task Management Service Integration Benchmark
#
# Tests integration with Atlassian Jira for issue tracking and project management.
# Validates the AI's ability to authenticate with Jira's REST API, manage projects,
# create and update issues, and handle Jira's specific data structures.
- name: "jira"
  category: "Task Management Service"
  description: |
    Create a connector that uses the Jira API to manage tasks and issues. 
    The connector must save the Jira API token, domain URL, and user email, and provide functionality
    to create, update, and retrieve issues.

  specs:
    - description: "Connector stores Jira API token, domain URL, and user email"
      preconditions: "The system state has not yet been configured for Jira."
      postconditions: "The connector successfully saves the Jira API token, domain URL, and user email to state."

    - description: "Connector creates a new issue in Jira"
      preconditions: "Jira is configured with valid credentials and project exists."
      postconditions: "The connector creates a new issue in the specified Jira project."

    - description: "Connector retrieves issues from a Jira project"
      preconditions: "Jira is configured and issues exist in the project."
      postconditions: "The connector retrieves and displays a list of issues from the specified project."

    - description: "Connector updates an existing issue in Jira"
      preconditions: "Jira is configured and a specific issue exists to be updated."
      postconditions: "The connector updates the specified issue with new information."

    - description: "Connector executes without additional user intervention"
      preconditions: "All necessary packages are pre-installed."
      postconditions: "The connector code runs and executes correctly (e.g. passes a health check)."

  tests:
    - description: "Create Jira Issue"
      preconditions: "Jira configuration is stored in state."
      postconditions: "Connector creates a new issue in the specified Jira project."
      function_to_run: !python/function |
        def test_create_jira_issue(zerg_state=None):
          """Test that the Jira connector creates a new issue."""
          print("Creating new issue using Jira API")
          
          assert zerg_state, "this test requires valid zerg_state"

          # Ensure required keys exist; use dict.get() for safe retrieval.
          jira_api_token = zerg_state.get("jira_api_token").get("value")
          jira_domain = zerg_state.get("jira_domain").get("value")
          jira_email = zerg_state.get("jira_email").get("value")

          # Basic assertions to verify all necessary fields are present.
          assert jira_api_token, "Missing jira_api_token in agent state"
          assert jira_domain, "Missing jira_domain in agent state"
          assert jira_email, "Missing jira_email in agent state"

          # Attempt to import the JiraConnector object.
          from connector import JiraConnector

          connector = JiraConnector(
              jira_api_token=jira_api_token,
              jira_domain=jira_domain,
              jira_email=jira_email
          )

          # Get the first available project
          projects = connector.get_projects()
          assert projects and len(projects) > 0, "No projects found in Jira instance"
          project_key = projects[0]["key"]

          issue_data = {
              "summary": "Test Issue",
              "description": "This is a test issue created by the connector.",
              "issue_type": "Task"
          }

          issue_key = connector.create_issue(
              project_key=project_key,
              issue_data=issue_data
          )

          assert issue_key, "Issue was not created successfully"

          return True

    - description: "Retrieve Jira Issues"
      preconditions: "Jira is configured and issues exist in the project."
      postconditions: "The connector retrieves a list of issues from the specified project."
      function_to_run: !python/function |
        def test_retrieve_jira_issues(zerg_state=None):
            """Test that the Jira connector retrieves issues from a project."""
            print("Retrieving issues from Jira project")

            assert zerg_state, "Zerg state required and not provided correctly to unit test"

            jira_api_token = zerg_state.get("jira_api_token").get("value")
            jira_domain = zerg_state.get("jira_domain").get("value")
            jira_email = zerg_state.get("jira_email").get("value")

            assert jira_api_token, "Missing jira_api_token in agent state"
            assert jira_domain, "Missing jira_domain in agent state"
            assert jira_email, "Missing jira_email in agent state"

            from connector import JiraConnector

            connector = JiraConnector(
              jira_api_token=jira_api_token,
              jira_domain=jira_domain,
              jira_email=jira_email
            )  

            # Get the first available project
            projects = connector.get_projects()
            assert projects and len(projects) > 0, "No projects found in Jira instance"
            project_key = projects[0]["key"]
            
            issues = connector.get_issues(
                project_key=project_key,
                max_results=10  # constants.DEFAULT_API_RESULT_LIMIT from suite.yaml
            )

            assert issues and len(issues) > 0, "No issues retrieved from project"

            return True

    - description: "Update Jira Issue"
      preconditions: "Jira is configured and a specific issue exists to be updated."
      postconditions: "The connector updates the specified issue with new information."
      function_to_run: !python/function |
        def test_update_jira_issue(zerg_state=None):
            """Test that the Jira connector updates an existing issue."""
            print("Updating existing Jira issue")

            assert zerg_state, "Zerg state required and not provided correctly to unit test"

            jira_api_token = zerg_state.get("jira_api_token").get("value")
            jira_domain = zerg_state.get("jira_domain").get("value")
            jira_email = zerg_state.get("jira_email").get("value")

            assert jira_api_token, "Missing jira_api_token in agent state"
            assert jira_domain, "Missing jira_domain in agent state"
            assert jira_email, "Missing jira_email in agent state"

            from connector import JiraConnector

            connector = JiraConnector(
              jira_api_token=jira_api_token,
              jira_domain=jira_domain,
              jira_email=jira_email
            )  

            update_data = {
                "summary": "Updated Test Issue",
                "description": "This issue has been updated by the connector."
            }

            # Get the first available project
            projects = connector.get_projects()
            assert projects and len(projects) > 0, "No projects found in Jira instance"
            project_key = projects[0]["key"]
            
            # Get the first issue from that project
            issues = connector.get_issues(project_key=project_key, max_results=1)
            assert issues and len(issues) > 0, "No issues found in project"
            issue_key = issues[0]["key"]
            
            result = connector.update_issue(
                issue_key=issue_key,
                update_data=update_data
            )

            assert result is True, "Issue was not updated successfully"

            return True

  references: []
  
  configs:
    - name: "jira_api_token"
      description: "Jira API token to be used for authentication"
      value: !env/var 
    - name: "jira_domain"
      description: "Jira domain URL (e.g. 'company.atlassian.net')"
      value: !env/var
    - name: "jira_email"
      description: "Email address associated with the Jira account"
      value: !env/var
# !# Jira Task Management Service

# Confluence Documentation Service Integration Benchmark
#
# Tests integration with Atlassian Confluence for knowledge management and
# collaborative documentation. Validates the AI's ability to create and manage
# pages, spaces, and attachments through Confluence's REST API.
- name: "confluence"
  category: "Documentation Service"
  description: |
    Create a connector that uses the Confluence API to manage spaces, pages, and content. 
    The connector must save the Confluence domain URL, username/email, and API token, and provide functionality
    to create, update, and retrieve spaces, pages, and attachments.

  specs:
    - description: "Connector stores Confluence authentication credentials"
      preconditions: "The system state has not yet been configured for Confluence."
      postconditions: "The connector successfully saves the Confluence domain URL, username/email, and API token to state."

    - description: "Connector creates a new page in Confluence"
      preconditions: "Confluence is configured with valid credentials and a space exists."
      postconditions: "The connector creates a new page in a Confluence space."

    - description: "Connector retrieves pages from a Confluence space"
      preconditions: "Confluence is configured and pages exist in the space."
      postconditions: "The connector retrieves and displays a list of pages from a Confluence space."

    - description: "Connector updates an existing page in Confluence"
      preconditions: "Confluence is configured and a specific page exists to be updated."
      postconditions: "The connector updates the specified page with new content."

    - description: "Connector executes without additional user intervention"
      preconditions: "All necessary packages are pre-installed."
      postconditions: "The connector code runs and executes correctly (e.g. passes a health check)."

  tests:
    - description: "Create Confluence Page"
      preconditions: "Confluence configuration is stored in state."
      postconditions: "Connector creates a new page in a Confluence space."
      function_to_run: !python/function |
        def test_create_confluence_page(zerg_state=None):
          """Test that the Confluence connector creates a new page."""
          print("Creating new page using Confluence API")
          
          assert zerg_state, "this test requires valid zerg_state"

          # Ensure required keys exist; use dict.get() for safe retrieval.
          confluence_url = zerg_state.get("confluence_url").get("value")
          confluence_username = zerg_state.get("confluence_username").get("value")
          confluence_api_token = zerg_state.get("confluence_api_token").get("value")

          # Basic assertions to verify all necessary fields are present.
          assert confluence_url, "Missing confluence_url in agent state"
          assert confluence_username, "Missing confluence_username in agent state"
          assert confluence_api_token, "Missing confluence_api_token in agent state"

          # Attempt to import the ConfluenceConnector object.
          from connector import ConfluenceConnector

          connector = ConfluenceConnector(
              confluence_url=confluence_url,
              confluence_username=confluence_username,
              confluence_api_token=confluence_api_token
          )

          # Get the first available space
          spaces = connector.get_spaces(limit=1)
          assert spaces and len(spaces) > 0, "No spaces found in Confluence"
          space_key = spaces[0]["key"]

          page_data = {
              "title": "Test Page",
              "content": "<p>This is a test page created by the connector.</p>",
              "parent_id": None  # Root level page
          }

          page_id = connector.create_page(
              space_key=space_key,
              page_data=page_data
          )

          assert page_id, "Page was not created successfully"

          return True

    - description: "Retrieve Confluence Pages"
      preconditions: "Confluence is configured and pages exist in the space."
      postconditions: "The connector retrieves a list of pages from a Confluence space."
      function_to_run: !python/function |
        def test_retrieve_confluence_pages(zerg_state=None):
            """Test that the Confluence connector retrieves pages from a space."""
            print("Retrieving pages from Confluence space")

            assert zerg_state, "Zerg state required and not provided correctly to unit test"

            confluence_url = zerg_state.get("confluence_url").get("value")
            confluence_username = zerg_state.get("confluence_username").get("value")
            confluence_api_token = zerg_state.get("confluence_api_token").get("value")

            assert confluence_url, "Missing confluence_url in agent state"
            assert confluence_username, "Missing confluence_username in agent state"
            assert confluence_api_token, "Missing confluence_api_token in agent state"

            from connector import ConfluenceConnector

            connector = ConfluenceConnector(
                confluence_url=confluence_url,
                confluence_username=confluence_username,
                confluence_api_token=confluence_api_token
            )  

            # Get the first available space
            spaces = connector.get_spaces(limit=1)
            assert spaces and len(spaces) > 0, "No spaces found in Confluence"
            space_key = spaces[0]["key"]
            
            # Get pages from the space
            pages = connector.get_pages(
                space_key=space_key,
                limit=10
            )

            assert pages and len(pages) > 0, "No pages retrieved from space"

            return True

    - description: "Update Confluence Page"
      preconditions: "Confluence is configured and a specific page exists to be updated."
      postconditions: "The connector updates the specified page with new content."
      function_to_run: !python/function |
        def test_update_confluence_page(zerg_state=None):
            """Test that the Confluence connector updates an existing page."""
            print("Updating existing Confluence page")

            assert zerg_state, "Zerg state required and not provided correctly to unit test"

            confluence_url = zerg_state.get("confluence_url").get("value")
            confluence_username = zerg_state.get("confluence_username").get("value")
            confluence_api_token = zerg_state.get("confluence_api_token").get("value")

            assert confluence_url, "Missing confluence_url in agent state"
            assert confluence_username, "Missing confluence_username in agent state"
            assert confluence_api_token, "Missing confluence_api_token in agent state"

            from connector import ConfluenceConnector

            connector = ConfluenceConnector(
                confluence_url=confluence_url,
                confluence_username=confluence_username,
                confluence_api_token=confluence_api_token
            )  

            # Get the first available space
            spaces = connector.get_spaces(limit=1)
            assert spaces and len(spaces) > 0, "No spaces found in Confluence"
            space_key = spaces[0]["key"]
            
            # Get the first page from that space
            pages = connector.get_pages(space_key=space_key, limit=1)
            assert pages and len(pages) > 0, "No pages found in space"
            page_id = pages[0]["id"]
            current_version = pages[0]["version"]["number"]

            update_data = {
                "title": "Updated Test Page",
                "content": "<p>This page has been updated by the connector.</p>",
                "version": current_version + 1
            }

            result = connector.update_page(
                page_id=page_id,
                update_data=update_data
            )

            assert result is True, "Page was not updated successfully"

            return True

    - description: "Add Attachment to Confluence Page"
      preconditions: "Confluence is configured and a page exists to add an attachment to."
      postconditions: "The connector adds an attachment to a Confluence page."
      function_to_run: !python/function |
        def test_add_confluence_attachment(zerg_state=None):
            """Test that the Confluence connector adds an attachment to a page."""
            print("Adding attachment to Confluence page")
            
            assert zerg_state, "this test requires valid zerg_state"

            # Ensure required keys exist; use dict.get() for safe retrieval.
            confluence_url = zerg_state.get("confluence_url").get("value")
            confluence_username = zerg_state.get("confluence_username").get("value")
            confluence_api_token = zerg_state.get("confluence_api_token").get("value")

            # Basic assertions to verify all necessary fields are present.
            assert confluence_url, "Missing confluence_url in agent state"
            assert confluence_username, "Missing confluence_username in agent state"
            assert confluence_api_token, "Missing confluence_api_token in agent state"

            # Attempt to import the ConfluenceConnector object.
            from connector import ConfluenceConnector

            connector = ConfluenceConnector(
                confluence_url=confluence_url,
                confluence_username=confluence_username,
                confluence_api_token=confluence_api_token
            )

            # Get the first available space
            spaces = connector.get_spaces(limit=1)
            assert spaces and len(spaces) > 0, "No spaces found in Confluence"
            space_key = spaces[0]["key"]
            
            # Get the first page from that space
            pages = connector.get_pages(space_key=space_key, limit=1)
            assert pages and len(pages) > 0, "No pages found in space"
            page_id = pages[0]["id"]
            
            # Create a sample file to upload
            import tempfile
            
            temp_file = tempfile.NamedTemporaryFile(suffix=".txt", delete=False)
            temp_file.write(b"This is a test attachment from the Confluence connector.")
            temp_file.close()
            
            attachment_id = connector.add_attachment(
                page_id=page_id,
                file_path=temp_file.name,
                file_name="test_attachment.txt",
                content_type="text/plain"
            )
            
            # Clean up temporary file
            import os
            os.unlink(temp_file.name)

            assert attachment_id, "Attachment was not added successfully"

            return True

  references: []
  
  configs:
    - name: "confluence_url"
      description: "Confluence instance URL (e.g. 'company.atlassian.net/wiki')"
      value: !env/var
    - name: "confluence_username"
      description: "Confluence username or email for authentication"
      value: !env/var
    - name: "confluence_api_token"
      description: "Confluence API token for authentication"
      value: !env/var
# !# Confluence Documentation Service

# Asana Task Management Service Integration Benchmark
#
# Tests integration with Asana for project and task management.
# Validates the AI's ability to work with Asana's workspace-based model,
# manage projects, tasks, and team collaboration features.
- name: "asana"
  category: "Task Management Service"
  description: |
    Create a connector that uses the Asana API to manage tasks and projects. 
    The connector must save the Asana personal access token and provide functionality
    to create, update, and retrieve tasks and projects.

  specs:
    - description: "Connector stores Asana personal access token"
      preconditions: "The system state has not yet been configured for Asana."
      postconditions: "The connector successfully saves the Asana personal access token to state."

    - description: "Connector creates a new task in Asana"
      preconditions: "Asana is configured with valid credentials and a workspace exists."
      postconditions: "The connector creates a new task in the specified Asana workspace."

    - description: "Connector retrieves tasks from an Asana workspace"
      preconditions: "Asana is configured and tasks exist in the workspace."
      postconditions: "The connector retrieves and displays a list of tasks from the workspace."

    - description: "Connector updates an existing task in Asana"
      preconditions: "Asana is configured and a specific task exists to be updated."
      postconditions: "The connector updates the specified task with new information."

    - description: "Connector executes without additional user intervention"
      preconditions: "All necessary packages are pre-installed."
      postconditions: "The connector code runs and executes correctly (e.g. passes a health check)."

  tests:
    - description: "Create Asana Task"
      preconditions: "Asana configuration is stored in state."
      postconditions: "Connector creates a new task in the Asana workspace."
      function_to_run: !python/function |
        def test_create_asana_task(zerg_state=None):
          """Test that the Asana connector creates a new task."""
          print("Creating new task using Asana API")
          
          assert zerg_state, "this test requires valid zerg_state"

          # Ensure required keys exist; use dict.get() for safe retrieval.
          asana_token = zerg_state.get("asana_token").get("value")

          # Basic assertions to verify all necessary fields are present.
          assert asana_token, "Missing asana_token in agent state"

          # Attempt to import the AsanaConnector object.
          from connector import AsanaConnector

          connector = AsanaConnector(
              asana_token=asana_token
          )

          # Get the first available workspace
          workspaces = connector.get_workspaces()
          assert workspaces and len(workspaces) > 0, "No workspaces found in Asana account"
          workspace_gid = workspaces[0]["gid"]
          
          # Get the first available project
          projects = connector.get_projects(workspace_gid=workspace_gid)
          assert projects and len(projects) > 0, "No projects found in workspace"
          project_gid = projects[0]["gid"]

          task_data = {
              "name": "Test Task",
              "notes": "This is a test task created by the connector.",
              "due_on": None
          }

          task_gid = connector.create_task(
              project_gid=project_gid,
              task_data=task_data
          )

          assert task_gid, "Task was not created successfully"

          return True

    - description: "Retrieve Asana Tasks"
      preconditions: "Asana is configured and tasks exist in the workspace."
      postconditions: "The connector retrieves a list of tasks from the workspace."
      function_to_run: !python/function |
        def test_retrieve_asana_tasks(zerg_state=None):
            """Test that the Asana connector retrieves tasks from a workspace."""
            print("Retrieving tasks from Asana workspace")

            assert zerg_state, "Zerg state required and not provided correctly to unit test"

            asana_token = zerg_state.get("asana_token").get("value")

            assert asana_token, "Missing asana_token in agent state"

            from connector import AsanaConnector

            connector = AsanaConnector(
              asana_token=asana_token
            )  

            # Get the first available workspace
            workspaces = connector.get_workspaces()
            assert workspaces and len(workspaces) > 0, "No workspaces found in Asana account"
            workspace_gid = workspaces[0]["gid"]
            
            # Get the first available project
            projects = connector.get_projects(workspace_gid=workspace_gid)
            assert projects and len(projects) > 0, "No projects found in workspace"
            project_gid = projects[0]["gid"]
            
            tasks = connector.get_tasks(
                project_gid=project_gid,
                limit=10
            )

            assert tasks and len(tasks) > 0, "No tasks retrieved from project"

            return True

    - description: "Update Asana Task"
      preconditions: "Asana is configured and a specific task exists to be updated."
      postconditions: "The connector updates the specified task with new information."
      function_to_run: !python/function |
        def test_update_asana_task(zerg_state=None):
            """Test that the Asana connector updates an existing task."""
            print("Updating existing Asana task")

            assert zerg_state, "Zerg state required and not provided correctly to unit test"

            asana_token = zerg_state.get("asana_token").get("value")

            assert asana_token, "Missing asana_token in agent state"

            from connector import AsanaConnector

            connector = AsanaConnector(
              asana_token=asana_token
            )  

            # Get the first available workspace
            workspaces = connector.get_workspaces()
            assert workspaces and len(workspaces) > 0, "No workspaces found in Asana account"
            workspace_gid = workspaces[0]["gid"]
            
            # Get the first available project
            projects = connector.get_projects(workspace_gid=workspace_gid)
            assert projects and len(projects) > 0, "No projects found in workspace"
            project_gid = projects[0]["gid"]
            
            # Get the first task from that project
            tasks = connector.get_tasks(project_gid=project_gid, limit=1)
            assert tasks and len(tasks) > 0, "No tasks found in project"
            task_gid = tasks[0]["gid"]

            update_data = {
                "name": "Updated Test Task",
                "notes": "This task has been updated by the connector."
            }

            result = connector.update_task(
                task_gid=task_gid,
                update_data=update_data
            )

            assert result is True, "Task was not updated successfully"

            return True

  references: []
  
  configs:
    - name: "asana_token"
      description: "Asana personal access token for authentication"
      value: !env/var
# !# Asana Task Management Service

# Trello Task Management Service Integration Benchmark
#
# Tests integration with Trello's card-based project management system.
# Validates the AI's ability to work with Trello's boards, lists, and cards
# model, including card operations and board management.
- name: "trello"
  category: "Task Management Service"
  description: |
    Create a connector that uses the Trello API to manage boards, lists, and cards. 
    The connector must save the Trello API key and token, and provide functionality
    to create, update, and retrieve boards, lists, and cards.

  specs:
    - description: "Connector stores Trello API key and token"
      preconditions: "The system state has not yet been configured for Trello."
      postconditions: "The connector successfully saves the Trello API key and token to state."

    - description: "Connector creates a new card in Trello"
      preconditions: "Trello is configured with valid credentials and a board exists."
      postconditions: "The connector creates a new card in a Trello list."

    - description: "Connector retrieves cards from a Trello board"
      preconditions: "Trello is configured and cards exist on the board."
      postconditions: "The connector retrieves and displays a list of cards from the board."

    - description: "Connector updates an existing card in Trello"
      preconditions: "Trello is configured and a specific card exists to be updated."
      postconditions: "The connector updates the specified card with new information."

    - description: "Connector executes without additional user intervention"
      preconditions: "All necessary packages are pre-installed."
      postconditions: "The connector code runs and executes correctly (e.g. passes a health check)."

  tests:
    - description: "Create Trello Card"
      preconditions: "Trello configuration is stored in state."
      postconditions: "Connector creates a new card in a Trello list."
      function_to_run: !python/function |
        def test_create_trello_card(zerg_state=None):
          """Test that the Trello connector creates a new card."""
          print("Creating new card using Trello API")
          
          assert zerg_state, "this test requires valid zerg_state"

          # Ensure required keys exist; use dict.get() for safe retrieval.
          trello_api_key = zerg_state.get("trello_api_key").get("value")
          trello_token = zerg_state.get("trello_token").get("value")

          # Basic assertions to verify all necessary fields are present.
          assert trello_api_key, "Missing trello_api_key in agent state"
          assert trello_token, "Missing trello_token in agent state"

          # Attempt to import the TrelloConnector object.
          from connector import TrelloConnector

          connector = TrelloConnector(
              trello_api_key=trello_api_key,
              trello_token=trello_token
          )

          # Get the first available board
          boards = connector.get_boards()
          assert boards and len(boards) > 0, "No boards found in Trello account"
          board_id = boards[0]["id"]
          
          # Get the first available list
          lists = connector.get_lists(board_id=board_id)
          assert lists and len(lists) > 0, "No lists found on board"
          list_id = lists[0]["id"]

          card_data = {
              "name": "Test Card",
              "desc": "This is a test card created by the connector.",
              "pos": "top"
          }

          card_id = connector.create_card(
              list_id=list_id,
              card_data=card_data
          )

          assert card_id, "Card was not created successfully"

          return True

    - description: "Retrieve Trello Cards"
      preconditions: "Trello is configured and cards exist on the board."
      postconditions: "The connector retrieves a list of cards from the board."
      function_to_run: !python/function |
        def test_retrieve_trello_cards(zerg_state=None):
            """Test that the Trello connector retrieves cards from a board."""
            print("Retrieving cards from Trello board")

            assert zerg_state, "Zerg state required and not provided correctly to unit test"

            trello_api_key = zerg_state.get("trello_api_key").get("value")
            trello_token = zerg_state.get("trello_token").get("value")

            assert trello_api_key, "Missing trello_api_key in agent state"
            assert trello_token, "Missing trello_token in agent state"

            from connector import TrelloConnector

            connector = TrelloConnector(
              trello_api_key=trello_api_key,
              trello_token=trello_token
            )  

            # Get the first available board
            boards = connector.get_boards()
            assert boards and len(boards) > 0, "No boards found in Trello account"
            board_id = boards[0]["id"]
            
            # Get all cards on the board
            cards = connector.get_cards(
                board_id=board_id
            )

            assert cards and len(cards) > 0, "No cards retrieved from board"

            return True

    - description: "Update Trello Card"
      preconditions: "Trello is configured and a specific card exists to be updated."
      postconditions: "The connector updates the specified card with new information."
      function_to_run: !python/function |
        def test_update_trello_card(zerg_state=None):
            """Test that the Trello connector updates an existing card."""
            print("Updating existing Trello card")

            assert zerg_state, "Zerg state required and not provided correctly to unit test"

            trello_api_key = zerg_state.get("trello_api_key").get("value")
            trello_token = zerg_state.get("trello_token").get("value")

            assert trello_api_key, "Missing trello_api_key in agent state"
            assert trello_token, "Missing trello_token in agent state"

            from connector import TrelloConnector

            connector = TrelloConnector(
              trello_api_key=trello_api_key,
              trello_token=trello_token
            )  

            # Get the first available board
            boards = connector.get_boards()
            assert boards and len(boards) > 0, "No boards found in Trello account"
            board_id = boards[0]["id"]
            
            # Get the first card from that board
            cards = connector.get_cards(board_id=board_id)
            assert cards and len(cards) > 0, "No cards found on board"
            card_id = cards[0]["id"]

            update_data = {
                "name": "Updated Test Card",
                "desc": "This card has been updated by the connector."
            }

            result = connector.update_card(
                card_id=card_id,
                update_data=update_data
            )

            assert result is True, "Card was not updated successfully"

            return True

  references: []
  
  configs:
    - name: "trello_api_key"
      description: "Trello API key for authentication"
      value: !env/var
    - name: "trello_token"
      description: "Trello token for authentication"
      value: !env/var
# !# Trello Task Management Service

# Salesforce CRM Service Integration Benchmark
#
# Tests integration with Salesforce for customer relationship management.
# Validates the AI's ability to work with complex enterprise CRM systems,
# including SOQL queries, custom objects, and Salesforce's data model.
- name: "salesforce"
  category: "CRM Service"
  description: |
    Create a connector that uses the Salesforce API to manage contacts, accounts, and opportunities. 
    The connector must save the Salesforce username, password, security token, and consumer key/secret, 
    and provide functionality to create, update, and retrieve records.

  specs:
    - description: "Connector stores Salesforce authentication credentials"
      preconditions: "The system state has not yet been configured for Salesforce."
      postconditions: "The connector successfully saves the Salesforce credentials to state."

    - description: "Connector creates a new contact in Salesforce"
      preconditions: "Salesforce is configured with valid credentials."
      postconditions: "The connector creates a new contact in Salesforce."

    - description: "Connector retrieves accounts from Salesforce"
      preconditions: "Salesforce is configured and accounts exist in the organization."
      postconditions: "The connector retrieves and displays a list of accounts from Salesforce."

    - description: "Connector updates an existing opportunity in Salesforce"
      preconditions: "Salesforce is configured and a specific opportunity exists to be updated."
      postconditions: "The connector updates the specified opportunity with new information."

    - description: "Connector executes without additional user intervention"
      preconditions: "All necessary packages are pre-installed."
      postconditions: "The connector code runs and executes correctly (e.g. passes a health check)."

  tests:
    - description: "Create Salesforce Contact"
      preconditions: "Salesforce configuration is stored in state."
      postconditions: "Connector creates a new contact in Salesforce."
      function_to_run: !python/function |
        def test_create_salesforce_contact(zerg_state=None):
          """Test that the Salesforce connector creates a new contact."""
          print("Creating new contact using Salesforce API")
          
          assert zerg_state, "this test requires valid zerg_state"

          # Ensure required keys exist; use dict.get() for safe retrieval.
          sf_username = zerg_state.get("sf_username").get("value")
          sf_password = zerg_state.get("sf_password").get("value")
          sf_security_token = zerg_state.get("sf_security_token").get("value")
          sf_consumer_key = zerg_state.get("sf_consumer_key").get("value")
          sf_consumer_secret = zerg_state.get("sf_consumer_secret").get("value")

          # Basic assertions to verify all necessary fields are present.
          assert sf_username, "Missing sf_username in agent state"
          assert sf_password, "Missing sf_password in agent state"
          assert sf_security_token, "Missing sf_security_token in agent state"
          assert sf_consumer_key, "Missing sf_consumer_key in agent state"
          assert sf_consumer_secret, "Missing sf_consumer_secret in agent state"

          # Attempt to import the SalesforceConnector object.
          from connector import SalesforceConnector

          connector = SalesforceConnector(
              sf_username=sf_username,
              sf_password=sf_password,
              sf_security_token=sf_security_token,
              sf_consumer_key=sf_consumer_key,
              sf_consumer_secret=sf_consumer_secret
          )

          # Get a random account to associate the contact with
          accounts = connector.query_records("SELECT Id FROM Account LIMIT 1")
          assert accounts and len(accounts) > 0, "No accounts found in Salesforce"
          account_id = accounts[0]["Id"]

          contact_data = {
              "LastName": "Test Contact",
              "FirstName": "API",
              "Email": "test@example.com",
              "Phone": "555-1234",
              "AccountId": account_id
          }

          contact_id = connector.create_record(
              object_name="Contact",
              record_data=contact_data
          )

          assert contact_id, "Contact was not created successfully"

          return True

    - description: "Retrieve Salesforce Accounts"
      preconditions: "Salesforce is configured and accounts exist in the organization."
      postconditions: "The connector retrieves a list of accounts from Salesforce."
      function_to_run: !python/function |
        def test_retrieve_salesforce_accounts(zerg_state=None):
            """Test that the Salesforce connector retrieves accounts."""
            print("Retrieving accounts from Salesforce")

            assert zerg_state, "Zerg state required and not provided correctly to unit test"

            sf_username = zerg_state.get("sf_username").get("value")
            sf_password = zerg_state.get("sf_password").get("value")
            sf_security_token = zerg_state.get("sf_security_token").get("value")
            sf_consumer_key = zerg_state.get("sf_consumer_key").get("value")
            sf_consumer_secret = zerg_state.get("sf_consumer_secret").get("value")

            assert sf_username, "Missing sf_username in agent state"
            assert sf_password, "Missing sf_password in agent state"
            assert sf_security_token, "Missing sf_security_token in agent state"
            assert sf_consumer_key, "Missing sf_consumer_key in agent state"
            assert sf_consumer_secret, "Missing sf_consumer_secret in agent state"

            from connector import SalesforceConnector

            connector = SalesforceConnector(
                sf_username=sf_username,
                sf_password=sf_password,
                sf_security_token=sf_security_token,
                sf_consumer_key=sf_consumer_key,
                sf_consumer_secret=sf_consumer_secret
            )  

            # Query accounts with key fields
            accounts = connector.query_records(
                "SELECT Id, Name, Type, Industry, Phone FROM Account LIMIT 10"
            )

            assert accounts and len(accounts) > 0, "No accounts retrieved from Salesforce"

            return True

    - description: "Update Salesforce Opportunity"
      preconditions: "Salesforce is configured and a specific opportunity exists to be updated."
      postconditions: "The connector updates the specified opportunity with new information."
      function_to_run: !python/function |
        def test_update_salesforce_opportunity(zerg_state=None):
            """Test that the Salesforce connector updates an existing opportunity."""
            print("Updating existing Salesforce opportunity")

            assert zerg_state, "Zerg state required and not provided correctly to unit test"

            sf_username = zerg_state.get("sf_username").get("value")
            sf_password = zerg_state.get("sf_password").get("value")
            sf_security_token = zerg_state.get("sf_security_token").get("value")
            sf_consumer_key = zerg_state.get("sf_consumer_key").get("value")
            sf_consumer_secret = zerg_state.get("sf_consumer_secret").get("value")

            assert sf_username, "Missing sf_username in agent state"
            assert sf_password, "Missing sf_password in agent state"
            assert sf_security_token, "Missing sf_security_token in agent state"
            assert sf_consumer_key, "Missing sf_consumer_key in agent state"
            assert sf_consumer_secret, "Missing sf_consumer_secret in agent state"

            from connector import SalesforceConnector

            connector = SalesforceConnector(
                sf_username=sf_username,
                sf_password=sf_password,
                sf_security_token=sf_security_token,
                sf_consumer_key=sf_consumer_key,
                sf_consumer_secret=sf_consumer_secret
            )  

            # Find an existing opportunity
            opportunities = connector.query_records("SELECT Id FROM Opportunity LIMIT 1")
            assert opportunities and len(opportunities) > 0, "No opportunities found in Salesforce"
            opportunity_id = opportunities[0]["Id"]

            import datetime
            
            # Calculate a date 30 days in the future
            close_date = (datetime.datetime.now() + datetime.timedelta(days=30)).strftime('%Y-%m-%d')
            
            update_data = {
                "Name": "Updated Test Opportunity",
                "StageName": "Qualification",
                "CloseDate": close_date,
                "Amount": 15000.00
            }

            result = connector.update_record(
                object_name="Opportunity",
                record_id=opportunity_id,
                record_data=update_data
            )

            assert result is True, "Opportunity was not updated successfully"

            return True

  references: []
  
  configs:
    - name: "sf_username"
      description: "Salesforce username for authentication"
      value: !env/var
    - name: "sf_password"
      description: "Salesforce password for authentication"
      value: !env/var
    - name: "sf_security_token" 
      description: "Salesforce security token for authentication"
      value: !env/var
    - name: "sf_consumer_key"
      description: "Salesforce consumer key (client id) for OAuth authentication"
      value: !env/var
    - name: "sf_consumer_secret"
      description: "Salesforce consumer secret (client secret) for OAuth authentication"
      value: !env/var
# !# Salesforce CRM Service

# GitHub Version Control Service Integration Benchmark
#
# Tests integration with GitHub for version control and issue management.
# Validates the AI's ability to manage repositories, issues, pull requests,
# and collaborate through GitHub's comprehensive REST API.
- name: "github"
  category: "Version Control Service"
  description: |
    Create a connector that uses the GitHub API to manage repositories, issues, and pull requests. 
    The connector must save the GitHub personal access token and provide functionality
    to create, update, and retrieve repositories, issues, and pull requests.

  specs:
    - description: "Connector stores GitHub personal access token"
      preconditions: "The system state has not yet been configured for GitHub."
      postconditions: "The connector successfully saves the GitHub personal access token to state."

    - description: "Connector creates a new issue in a GitHub repository"
      preconditions: "GitHub is configured with valid credentials and a repository exists."
      postconditions: "The connector creates a new issue in the GitHub repository."

    - description: "Connector retrieves issues from a GitHub repository"
      preconditions: "GitHub is configured and issues exist in the repository."
      postconditions: "The connector retrieves and displays a list of issues from the repository."

    - description: "Connector updates an existing issue in GitHub"
      preconditions: "GitHub is configured and a specific issue exists to be updated."
      postconditions: "The connector updates the specified issue with new information."

    - description: "Connector executes without additional user intervention"
      preconditions: "All necessary packages are pre-installed."
      postconditions: "The connector code runs and executes correctly (e.g. passes a health check)."

  tests:
    - description: "Create GitHub Issue"
      preconditions: "GitHub configuration is stored in state."
      postconditions: "Connector creates a new issue in a GitHub repository."
      function_to_run: !python/function |
        def test_create_github_issue(zerg_state=None):
          """Test that the GitHub connector creates a new issue."""
          print("Creating new issue using GitHub API")
          
          assert zerg_state, "this test requires valid zerg_state"

          # Ensure required keys exist; use dict.get() for safe retrieval.
          github_token = zerg_state.get("github_token").get("value")

          # Basic assertions to verify all necessary fields are present.
          assert github_token, "Missing github_token in agent state"

          # Attempt to import the GitHubConnector object.
          from connector import GitHubConnector

          connector = GitHubConnector(
              github_token=github_token
          )

          # Get the first available repository
          repositories = connector.get_repositories()
          assert repositories and len(repositories) > 0, "No repositories found in GitHub account"
          repo_full_name = repositories[0]["full_name"]

          issue_data = {
              "title": "Test Issue",
              "body": "This is a test issue created by the connector.",
              "labels": ["test", "connector"]
          }

          issue_number = connector.create_issue(
              repo_full_name=repo_full_name,
              issue_data=issue_data
          )

          assert issue_number, "Issue was not created successfully"

          return True

    - description: "Retrieve GitHub Issues"
      preconditions: "GitHub is configured and issues exist in the repository."
      postconditions: "The connector retrieves a list of issues from the repository."
      function_to_run: !python/function |
        def test_retrieve_github_issues(zerg_state=None):
            """Test that the GitHub connector retrieves issues from a repository."""
            print("Retrieving issues from GitHub repository")

            assert zerg_state, "Zerg state required and not provided correctly to unit test"

            github_token = zerg_state.get("github_token").get("value")

            assert github_token, "Missing github_token in agent state"

            from connector import GitHubConnector

            connector = GitHubConnector(
              github_token=github_token
            )  

            # Get the first available repository
            repositories = connector.get_repositories()
            assert repositories and len(repositories) > 0, "No repositories found in GitHub account"
            repo_full_name = repositories[0]["full_name"]
            
            # Get open issues from the repository
            issues = connector.get_issues(
                repo_full_name=repo_full_name,
                state="open",
                per_page=10
            )

            assert issues and len(issues) > 0, "No open issues retrieved from repository"

            return True

    - description: "Update GitHub Issue"
      preconditions: "GitHub is configured and a specific issue exists to be updated."
      postconditions: "The connector updates the specified issue with new information."
      function_to_run: !python/function |
        def test_update_github_issue(zerg_state=None):
            """Test that the GitHub connector updates an existing issue."""
            print("Updating existing GitHub issue")

            assert zerg_state, "Zerg state required and not provided correctly to unit test"

            github_token = zerg_state.get("github_token").get("value")

            assert github_token, "Missing github_token in agent state"

            from connector import GitHubConnector

            connector = GitHubConnector(
              github_token=github_token
            )  

            # Get the first available repository
            repositories = connector.get_repositories()
            assert repositories and len(repositories) > 0, "No repositories found in GitHub account"
            repo_full_name = repositories[0]["full_name"]
            
            # Get the first open issue from that repository
            issues = connector.get_issues(repo_full_name=repo_full_name, state="open", per_page=1)
            assert issues and len(issues) > 0, "No open issues found in repository"
            issue_number = issues[0]["number"]

            update_data = {
                "title": "Updated Test Issue",
                "body": "This issue has been updated by the connector.",
                "state": "open",
                "labels": ["test", "updated", "connector"]
            }

            result = connector.update_issue(
                repo_full_name=repo_full_name,
                issue_number=issue_number,
                update_data=update_data
            )

            assert result is True, "Issue was not updated successfully"

            return True

    - description: "Create GitHub Pull Request"
      preconditions: "GitHub is configured and a repository with at least two branches exists."
      postconditions: "The connector creates a new pull request in the GitHub repository."
      function_to_run: !python/function |
        def test_create_github_pull_request(zerg_state=None):
            """Test that the GitHub connector creates a new pull request."""
            print("Creating new pull request using GitHub API")
            
            assert zerg_state, "this test requires valid zerg_state"

            # Ensure required keys exist; use dict.get() for safe retrieval.
            github_token = zerg_state.get("github_token").get("value")

            # Basic assertions to verify all necessary fields are present.
            assert github_token, "Missing github_token in agent state"

            # Attempt to import the GitHubConnector object.
            from connector import GitHubConnector

            connector = GitHubConnector(
                github_token=github_token
            )

            # Get the first available repository
            repositories = connector.get_repositories()
            assert repositories and len(repositories) > 0, "No repositories found in GitHub account"
            repo_full_name = repositories[0]["full_name"]
            
            # Get the available branches
            branches = connector.get_branches(repo_full_name=repo_full_name)
            assert branches and len(branches) >= 2, "Repository needs at least two branches"
            
            # Use the first branch as base and second as head
            base_branch = branches[0]["name"]
            head_branch = branches[1]["name"]

            pr_data = {
                "title": "Test Pull Request",
                "body": "This is a test pull request created by the connector.",
                "head": head_branch,
                "base": base_branch
            }

            pr_number = connector.create_pull_request(
                repo_full_name=repo_full_name,
                pr_data=pr_data
            )

            assert pr_number, "Pull request was not created successfully"

            return True

  references: []
  
  configs:
    - name: "github_token"
      description: "GitHub personal access token for authentication"
      value: !env/var
# !# GitHub Version Control Service

# Zendesk Customer Support Service Integration Benchmark
#
# Tests integration with Zendesk for customer support and ticket management.
# Validates the AI's ability to manage support tickets, customer interactions,
# and help desk workflows through Zendesk's API.
- name: "zendesk"
  category: "Customer Support Service"
  description: |
    Create a connector that uses the Zendesk API to manage tickets, users, and support interactions. 
    The connector must save the Zendesk subdomain, email, and API token, and provide functionality
    to create, update, and retrieve tickets and users.

  specs:
    - description: "Connector stores Zendesk authentication credentials"
      preconditions: "The system state has not yet been configured for Zendesk."
      postconditions: "The connector successfully saves the Zendesk subdomain, email, and API token to state."

    - description: "Connector creates a new ticket in Zendesk"
      preconditions: "Zendesk is configured with valid credentials."
      postconditions: "The connector creates a new support ticket in Zendesk."

    - description: "Connector retrieves tickets from Zendesk"
      preconditions: "Zendesk is configured and tickets exist in the account."
      postconditions: "The connector retrieves and displays a list of tickets from Zendesk."

    - description: "Connector updates an existing ticket in Zendesk"
      preconditions: "Zendesk is configured and a specific ticket exists to be updated."
      postconditions: "The connector updates the specified ticket with new information."

    - description: "Connector executes without additional user intervention"
      preconditions: "All necessary packages are pre-installed."
      postconditions: "The connector code runs and executes correctly (e.g. passes a health check)."

  tests:
    - description: "Create Zendesk Ticket"
      preconditions: "Zendesk configuration is stored in state."
      postconditions: "Connector creates a new ticket in Zendesk."
      function_to_run: !python/function |
        def test_create_zendesk_ticket(zerg_state=None):
          """Test that the Zendesk connector creates a new ticket."""
          print("Creating new ticket using Zendesk API")
          
          assert zerg_state, "this test requires valid zerg_state"

          # Ensure required keys exist; use dict.get() for safe retrieval.
          zendesk_subdomain = zerg_state.get("zendesk_subdomain").get("value")
          zendesk_email = zerg_state.get("zendesk_email").get("value")
          zendesk_api_token = zerg_state.get("zendesk_api_token").get("value")

          # Basic assertions to verify all necessary fields are present.
          assert zendesk_subdomain, "Missing zendesk_subdomain in agent state"
          assert zendesk_email, "Missing zendesk_email in agent state"
          assert zendesk_api_token, "Missing zendesk_api_token in agent state"

          # Attempt to import the ZendeskConnector object.
          from connector import ZendeskConnector

          connector = ZendeskConnector(
              zendesk_subdomain=zendesk_subdomain,
              zendesk_email=zendesk_email,
              zendesk_api_token=zendesk_api_token
          )

          # Get a valid requester
          users = connector.get_users(role="end-user", limit=1)
          assert users and len(users) > 0, "No end-users found in Zendesk"
          requester_id = users[0]["id"]

          ticket_data = {
              "subject": "Test Ticket",
              "comment": {
                  "body": "This is a test ticket created by the connector."
              },
              "priority": "normal",
              "requester_id": requester_id
          }

          ticket_id = connector.create_ticket(
              ticket_data=ticket_data
          )

          assert ticket_id, "Ticket was not created successfully"

          return True

    - description: "Retrieve Zendesk Tickets"
      preconditions: "Zendesk is configured and tickets exist in the account."
      postconditions: "The connector retrieves a list of tickets from Zendesk."
      function_to_run: !python/function |
        def test_retrieve_zendesk_tickets(zerg_state=None):
            """Test that the Zendesk connector retrieves tickets."""
            print("Retrieving tickets from Zendesk")

            assert zerg_state, "Zerg state required and not provided correctly to unit test"

            zendesk_subdomain = zerg_state.get("zendesk_subdomain").get("value")
            zendesk_email = zerg_state.get("zendesk_email").get("value")
            zendesk_api_token = zerg_state.get("zendesk_api_token").get("value")

            assert zendesk_subdomain, "Missing zendesk_subdomain in agent state"
            assert zendesk_email, "Missing zendesk_email in agent state"
            assert zendesk_api_token, "Missing zendesk_api_token in agent state"

            from connector import ZendeskConnector

            connector = ZendeskConnector(
                zendesk_subdomain=zendesk_subdomain,
                zendesk_email=zendesk_email,
                zendesk_api_token=zendesk_api_token
            )  

            # Get recent tickets
            tickets = connector.get_tickets(
                status="open",
                sort_by="created_at",
                sort_order="desc",
                limit=10
            )

            assert tickets and len(tickets) > 0, "No open tickets retrieved from Zendesk"

            return True

    - description: "Update Zendesk Ticket"
      preconditions: "Zendesk is configured and a specific ticket exists to be updated."
      postconditions: "The connector updates the specified ticket with new information."
      function_to_run: !python/function |
        def test_update_zendesk_ticket(zerg_state=None):
            """Test that the Zendesk connector updates an existing ticket."""
            print("Updating existing Zendesk ticket")

            assert zerg_state, "Zerg state required and not provided correctly to unit test"

            zendesk_subdomain = zerg_state.get("zendesk_subdomain").get("value")
            zendesk_email = zerg_state.get("zendesk_email").get("value")
            zendesk_api_token = zerg_state.get("zendesk_api_token").get("value")

            assert zendesk_subdomain, "Missing zendesk_subdomain in agent state"
            assert zendesk_email, "Missing zendesk_email in agent state"
            assert zendesk_api_token, "Missing zendesk_api_token in agent state"

            from connector import ZendeskConnector

            connector = ZendeskConnector(
                zendesk_subdomain=zendesk_subdomain,
                zendesk_email=zendesk_email,
                zendesk_api_token=zendesk_api_token
            )  

            # Get the first open ticket
            tickets = connector.get_tickets(status="open", limit=1)
            assert tickets and len(tickets) > 0, "No open tickets found in Zendesk"
            ticket_id = tickets[0]["id"]

            update_data = {
                "subject": "Updated Test Ticket",
                "comment": {
                    "body": "This ticket has been updated by the connector.",
                    "public": True
                },
                "priority": "high"
            }

            result = connector.update_ticket(
                ticket_id=ticket_id,
                update_data=update_data
            )

            assert result is True, "Ticket was not updated successfully"

            return True

    - description: "Add Ticket Comment"
      preconditions: "Zendesk is configured and a ticket exists to add a comment to."
      postconditions: "The connector adds a comment to a Zendesk ticket."
      function_to_run: !python/function |
        def test_add_ticket_comment(zerg_state=None):
            """Test that the Zendesk connector adds a comment to a ticket."""
            print("Adding comment to Zendesk ticket")
            
            assert zerg_state, "this test requires valid zerg_state"

            # Ensure required keys exist; use dict.get() for safe retrieval.
            zendesk_subdomain = zerg_state.get("zendesk_subdomain").get("value")
            zendesk_email = zerg_state.get("zendesk_email").get("value")
            zendesk_api_token = zerg_state.get("zendesk_api_token").get("value")

            # Basic assertions to verify all necessary fields are present.
            assert zendesk_subdomain, "Missing zendesk_subdomain in agent state"
            assert zendesk_email, "Missing zendesk_email in agent state"
            assert zendesk_api_token, "Missing zendesk_api_token in agent state"

            # Attempt to import the ZendeskConnector object.
            from connector import ZendeskConnector

            connector = ZendeskConnector(
                zendesk_subdomain=zendesk_subdomain,
                zendesk_email=zendesk_email,
                zendesk_api_token=zendesk_api_token
            )

            # Get the first open ticket
            tickets = connector.get_tickets(status="open", limit=1)
            assert tickets and len(tickets) > 0, "No open tickets found in Zendesk"
            ticket_id = tickets[0]["id"]
            
            comment_data = {
                "body": "This is a test comment added by the connector.",
                "public": True
            }
            
            comment_id = connector.add_comment(
                ticket_id=ticket_id,
                comment_data=comment_data
            )

            assert comment_id, "Comment was not added successfully"

            return True

  references: []
  
  configs:
    - name: "zendesk_subdomain"
      description: "Zendesk subdomain (e.g. 'company' in 'company.zendesk.com')"
      value: !env/var
    - name: "zendesk_email"
      description: "Zendesk email for authentication"
      value: !env/var
    - name: "zendesk_api_token"
      description: "Zendesk API token for authentication"
      value: !env/var
# !# Zendesk Customer Support Service

# ServiceNow ITSM Service Integration Benchmark
#
# Tests integration with ServiceNow for IT Service Management.
# Validates the AI's ability to manage incidents, problems, change requests,
# and IT workflow automation in enterprise environments.
- name: "servicenow"
  category: "ITSM Service"
  description: |
    Create a connector that uses the ServiceNow API to manage incidents, problems, and change requests. 
    The connector must save the ServiceNow instance URL, username, and password, and provide functionality
    to create, update, and retrieve incidents, problems, and change requests.

  specs:
    - description: "Connector stores ServiceNow authentication credentials"
      preconditions: "The system state has not yet been configured for ServiceNow."
      postconditions: "The connector successfully saves the ServiceNow instance URL, username, and password to state."

    - description: "Connector creates a new incident in ServiceNow"
      preconditions: "ServiceNow is configured with valid credentials."
      postconditions: "The connector creates a new incident in ServiceNow."

    - description: "Connector retrieves incidents from ServiceNow"
      preconditions: "ServiceNow is configured and incidents exist in the instance."
      postconditions: "The connector retrieves and displays a list of incidents from ServiceNow."

    - description: "Connector updates an existing incident in ServiceNow"
      preconditions: "ServiceNow is configured and a specific incident exists to be updated."
      postconditions: "The connector updates the specified incident with new information."

    - description: "Connector executes without additional user intervention"
      preconditions: "All necessary packages are pre-installed."
      postconditions: "The connector code runs and executes correctly (e.g. passes a health check)."

  tests:
    - description: "Create ServiceNow Incident"
      preconditions: "ServiceNow configuration is stored in state."
      postconditions: "Connector creates a new incident in ServiceNow."
      function_to_run: !python/function |
        def test_create_servicenow_incident(zerg_state=None):
          """Test that the ServiceNow connector creates a new incident."""
          print("Creating new incident using ServiceNow API")
          
          assert zerg_state, "this test requires valid zerg_state"

          # Ensure required keys exist; use dict.get() for safe retrieval.
          servicenow_instance = zerg_state.get("servicenow_instance").get("value")
          servicenow_username = zerg_state.get("servicenow_username").get("value")
          servicenow_password = zerg_state.get("servicenow_password").get("value")

          # Basic assertions to verify all necessary fields are present.
          assert servicenow_instance, "Missing servicenow_instance in agent state"
          assert servicenow_username, "Missing servicenow_username in agent state"
          assert servicenow_password, "Missing servicenow_password in agent state"

          # Attempt to import the ServiceNowConnector object.
          from connector import ServiceNowConnector

          connector = ServiceNowConnector(
              servicenow_instance=servicenow_instance,
              servicenow_username=servicenow_username,
              servicenow_password=servicenow_password
          )

          # Get the first available assignment group
          assignment_groups = connector.get_assignment_groups(limit=1)
          assert assignment_groups and len(assignment_groups) > 0, "No assignment groups found in ServiceNow"
          assignment_group_id = assignment_groups[0]["sys_id"]

          incident_data = {
              "short_description": "Test Incident",
              "description": "This is a test incident created by the connector.",
              "urgency": "2",
              "impact": "2",
              "assignment_group": assignment_group_id
          }

          incident_sys_id = connector.create_incident(
              incident_data=incident_data
          )

          assert incident_sys_id, "Incident was not created successfully"

          return True

    - description: "Retrieve ServiceNow Incidents"
      preconditions: "ServiceNow is configured and incidents exist in the instance."
      postconditions: "The connector retrieves a list of incidents from ServiceNow."
      function_to_run: !python/function |
        def test_retrieve_servicenow_incidents(zerg_state=None):
            """Test that the ServiceNow connector retrieves incidents."""
            print("Retrieving incidents from ServiceNow")

            assert zerg_state, "Zerg state required and not provided correctly to unit test"

            servicenow_instance = zerg_state.get("servicenow_instance").get("value")
            servicenow_username = zerg_state.get("servicenow_username").get("value")
            servicenow_password = zerg_state.get("servicenow_password").get("value")

            assert servicenow_instance, "Missing servicenow_instance in agent state"
            assert servicenow_username, "Missing servicenow_username in agent state"
            assert servicenow_password, "Missing servicenow_password in agent state"

            from connector import ServiceNowConnector

            connector = ServiceNowConnector(
                servicenow_instance=servicenow_instance,
                servicenow_username=servicenow_username,
                servicenow_password=servicenow_password
            )  

            # Query active incidents
            incidents = connector.get_incidents(
                query_params={"active": "true"},
                limit=10
            )

            assert incidents and len(incidents) > 0, "No active incidents retrieved from ServiceNow"

            return True

    - description: "Update ServiceNow Incident"
      preconditions: "ServiceNow is configured and a specific incident exists to be updated."
      postconditions: "The connector updates the specified incident with new information."
      function_to_run: !python/function |
        def test_update_servicenow_incident(zerg_state=None):
            """Test that the ServiceNow connector updates an existing incident."""
            print("Updating existing ServiceNow incident")

            assert zerg_state, "Zerg state required and not provided correctly to unit test"

            servicenow_instance = zerg_state.get("servicenow_instance").get("value")
            servicenow_username = zerg_state.get("servicenow_username").get("value")
            servicenow_password = zerg_state.get("servicenow_password").get("value")

            assert servicenow_instance, "Missing servicenow_instance in agent state"
            assert servicenow_username, "Missing servicenow_username in agent state"
            assert servicenow_password, "Missing servicenow_password in agent state"

            from connector import ServiceNowConnector

            connector = ServiceNowConnector(
                servicenow_instance=servicenow_instance,
                servicenow_username=servicenow_username,
                servicenow_password=servicenow_password
            )  

            # Get the first active incident
            incidents = connector.get_incidents(query_params={"active": "true"}, limit=1)
            assert incidents and len(incidents) > 0, "No active incidents found in ServiceNow"
            incident_sys_id = incidents[0]["sys_id"]

            update_data = {
                "short_description": "Updated Test Incident",
                "work_notes": "This incident has been updated by the connector.",
                "priority": "3"
            }

            result = connector.update_incident(
                incident_sys_id=incident_sys_id,
                update_data=update_data
            )

            assert result is True, "Incident was not updated successfully"

            return True

    - description: "Create ServiceNow Change Request"
      preconditions: "ServiceNow is configured with valid credentials."
      postconditions: "The connector creates a new change request in ServiceNow."
      function_to_run: !python/function |
        def test_create_servicenow_change_request(zerg_state=None):
            """Test that the ServiceNow connector creates a new change request."""
            print("Creating new change request using ServiceNow API")
            
            assert zerg_state, "this test requires valid zerg_state"

            # Ensure required keys exist; use dict.get() for safe retrieval.
            servicenow_instance = zerg_state.get("servicenow_instance").get("value")
            servicenow_username = zerg_state.get("servicenow_username").get("value")
            servicenow_password = zerg_state.get("servicenow_password").get("value")

            # Basic assertions to verify all necessary fields are present.
            assert servicenow_instance, "Missing servicenow_instance in agent state"
            assert servicenow_username, "Missing servicenow_username in agent state"
            assert servicenow_password, "Missing servicenow_password in agent state"

            # Attempt to import the ServiceNowConnector object.
            from connector import ServiceNowConnector

            connector = ServiceNowConnector(
                servicenow_instance=servicenow_instance,
                servicenow_username=servicenow_username,
                servicenow_password=servicenow_password
            )

            # Get the first available assignment group
            assignment_groups = connector.get_assignment_groups(limit=1)
            assert assignment_groups and len(assignment_groups) > 0, "No assignment groups found in ServiceNow"
            assignment_group_id = assignment_groups[0]["sys_id"]

            change_data = {
                "short_description": "Test Change Request",
                "description": "This is a test change request created by the connector.",
                "risk": "3",
                "impact": "2",
                "assignment_group": assignment_group_id,
                "type": "normal"
            }

            change_sys_id = connector.create_change_request(
                change_data=change_data
            )

            assert change_sys_id, "Change request was not created successfully"

            return True

  references: []
  
  configs:
    - name: "servicenow_instance"
      description: "ServiceNow instance URL (e.g. 'company.service-now.com')"
      value: !env/var
    - name: "servicenow_username"
      description: "ServiceNow username for authentication"
      value: !env/var
    - name: "servicenow_password"
      description: "ServiceNow password for authentication"
      value: !env/var
# !# ServiceNow ITSM Service

